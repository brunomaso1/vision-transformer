{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EuroSAT Vision Transformer Descripci\u00f3n Este es un proyecto en el marco de la carrera en Inteligencia Artificial de la Universidad de Buenos Aires (UBA), dentro de la materia Visi\u00f3n por Computadora III. El objetivo es comparar diferentes modelos de Vision Transformer (ViT) para la clasificaci\u00f3n de im\u00e1genes en el conjunto de datos EuroSAT, que contiene im\u00e1genes satelitales de diferentes clases geoespaciales. Estructura de la wiki Esta wiki contiene la documentaci\u00f3n del proyecto, incluyendo: Acerca del proyecto : Informaci\u00f3n general sobre el proyecto y su objetivo. Notebooks : Notebooks de Jupyter con experimentos y resultados. Tests : Pruebas unitarias y de integraci\u00f3n para asegurar la calidad del c\u00f3digo. Prefect : Flujos de trabajo y tareas automatizadas utilizando Prefect para la orquestaci\u00f3n de tareas. MLflow : Integraci\u00f3n con MLflow para el seguimiento de experimentos y modelos.","title":"Home"},{"location":"#eurosat-vision-transformer","text":"","title":"EuroSAT Vision Transformer"},{"location":"#descripcion","text":"Este es un proyecto en el marco de la carrera en Inteligencia Artificial de la Universidad de Buenos Aires (UBA), dentro de la materia Visi\u00f3n por Computadora III. El objetivo es comparar diferentes modelos de Vision Transformer (ViT) para la clasificaci\u00f3n de im\u00e1genes en el conjunto de datos EuroSAT, que contiene im\u00e1genes satelitales de diferentes clases geoespaciales.","title":"Descripci\u00f3n"},{"location":"#estructura-de-la-wiki","text":"Esta wiki contiene la documentaci\u00f3n del proyecto, incluyendo: Acerca del proyecto : Informaci\u00f3n general sobre el proyecto y su objetivo. Notebooks : Notebooks de Jupyter con experimentos y resultados. Tests : Pruebas unitarias y de integraci\u00f3n para asegurar la calidad del c\u00f3digo. Prefect : Flujos de trabajo y tareas automatizadas utilizando Prefect para la orquestaci\u00f3n de tareas. MLflow : Integraci\u00f3n con MLflow para el seguimiento de experimentos y modelos.","title":"Estructura de la wiki"},{"location":"about/","text":"About Este proyecto se centra en la comparaci\u00f3n de varios modelos de Vision Transformer (ViT) para la clasificaci\u00f3n de im\u00e1genes en el conjunto de datos EuroSAT. El objetivo es evaluar el rendimiento de diferentes arquitecturas ViT y t\u00e9cnicas de preprocesamiento en un conjunto de datos geoespacial.","title":"About"},{"location":"about/#about","text":"Este proyecto se centra en la comparaci\u00f3n de varios modelos de Vision Transformer (ViT) para la clasificaci\u00f3n de im\u00e1genes en el conjunto de datos EuroSAT. El objetivo es evaluar el rendimiento de diferentes arquitecturas ViT y t\u00e9cnicas de preprocesamiento en un conjunto de datos geoespacial.","title":"About"},{"location":"mlflow/","text":"MLflow Este proyecto utiliza MLflow para el seguimiento de experimentos y la gesti\u00f3n de modelos. MLflow es una plataforma de c\u00f3digo abierto que facilita la gesti\u00f3n del ciclo de vida de los modelos de machine learning, incluyendo el seguimiento de experimentos, la reproducci\u00f3n de resultados y la implementaci\u00f3n de modelos. M\u00e1s informaci\u00f3n sobre MLflow se puede encontrar en su documentaci\u00f3n oficial . Uso en el proyecto En este proyecto, todos los modelos se registraron en MLflow, lo que permiti\u00f3 realizar un seguimiento de los experimentos y comparar los resultados de diferentes configuraciones de modelos. Los experimentos se registran autom\u00e1ticamente al ejecutar los scripts de entrenamiento, y se pueden visualizar en la interfaz web de MLflow. Ejemplo de seguimiento de experimentos En la siguiente imagen se puede ver los experimentos registrados para este proyecto:","title":"MLFlow"},{"location":"mlflow/#mlflow","text":"Este proyecto utiliza MLflow para el seguimiento de experimentos y la gesti\u00f3n de modelos. MLflow es una plataforma de c\u00f3digo abierto que facilita la gesti\u00f3n del ciclo de vida de los modelos de machine learning, incluyendo el seguimiento de experimentos, la reproducci\u00f3n de resultados y la implementaci\u00f3n de modelos. M\u00e1s informaci\u00f3n sobre MLflow se puede encontrar en su documentaci\u00f3n oficial .","title":"MLflow"},{"location":"mlflow/#uso-en-el-proyecto","text":"En este proyecto, todos los modelos se registraron en MLflow, lo que permiti\u00f3 realizar un seguimiento de los experimentos y comparar los resultados de diferentes configuraciones de modelos. Los experimentos se registran autom\u00e1ticamente al ejecutar los scripts de entrenamiento, y se pueden visualizar en la interfaz web de MLflow.","title":"Uso en el proyecto"},{"location":"mlflow/#ejemplo-de-seguimiento-de-experimentos","text":"En la siguiente imagen se puede ver los experimentos registrados para este proyecto:","title":"Ejemplo de seguimiento de experimentos"},{"location":"notebooks/","text":"Notebooks Este trabajo se organiz\u00f3 en base a varios notebooks de Jupyter, cada uno de los cuales contiene experimentos y resultados relacionados con el proyecto. Los notebooks est\u00e1n dise\u00f1ados para ser ejecutados de manera secuencial, permitiendo reproducir los experimentos y analizar los resultados, siguiendo la plantilla recomendada seg\u00fan los autores de cookiecutter-data-science.drivendata.org . Lista de notebooks Exploraci\u00f3n de datos: 1 - Exploraci\u00f3n de datos Entrenamiento de modelos: 1 - Swin Transformer V2 2 - Convolutional Vision Transformer 3 - Vit Base 4 - Yolo V11 An\u00e1lisis de resultados: 1 - An\u00e1lisis de resultados","title":"Notebooks"},{"location":"notebooks/#notebooks","text":"Este trabajo se organiz\u00f3 en base a varios notebooks de Jupyter, cada uno de los cuales contiene experimentos y resultados relacionados con el proyecto. Los notebooks est\u00e1n dise\u00f1ados para ser ejecutados de manera secuencial, permitiendo reproducir los experimentos y analizar los resultados, siguiendo la plantilla recomendada seg\u00fan los autores de cookiecutter-data-science.drivendata.org .","title":"Notebooks"},{"location":"notebooks/#lista-de-notebooks","text":"Exploraci\u00f3n de datos: 1 - Exploraci\u00f3n de datos Entrenamiento de modelos: 1 - Swin Transformer V2 2 - Convolutional Vision Transformer 3 - Vit Base 4 - Yolo V11 An\u00e1lisis de resultados: 1 - An\u00e1lisis de resultados","title":"Lista de notebooks"},{"location":"prefect/","text":"Prefect Este proyecto utiliza Prefect para la orquestaci\u00f3n de flujos de trabajo y tareas automatizadas. Prefect es una herramienta que permite definir, programar y monitorear flujos de trabajo de manera eficiente. M\u00e1s informaci\u00f3n sobre Prefect se puede encontrar en su documentaci\u00f3n oficial . Flujos definidos Actualmente, se ha definido un flujo principal que se encarga de descargar y preprocesar el conjunto de datos EuroSAT. Este flujo se encuentra en el archivo dataset_flow.py y se ejecuta utilizando Prefect. Existe un cliente cli.py que permite ejecutar el flujo desde la l\u00ednea de comandos. Para ejecutar el flujo, puedes utilizar el siguiente comando: python -m vision_transformer.flows.cli prepare-dataset-flow huggingface Este flujo realiza las siguientes tareas: Descarga del conjunto de datos : Descarga el conjunto de datos de EuroSAT en su versi\u00f3n RGB. Extracci\u00f3n de datos : Extrae las im\u00e1genes del archivo descargado (como ZIP). Conversi\u00f3n a formato HuggingFace : Convierte las im\u00e1genes a un formato compatible con Hugging Face, creando un dataset que puede ser utilizado por los modelos de Vision Transformer. Split del dataset : Divide el conjunto de datos en conjuntos de entrenamiento, validaci\u00f3n y prueba, asegurando que las proporciones sean adecuadas para el entrenamiento de modelos. Ejemplo de ejecuci\u00f3n Puedes ver un ejemplo de ejecuci\u00f3n del flujo en la siguiente imagen: En este ejemplo podemos observar la ejecuci\u00f3n de cada uno de los pasos del flujo (el flujo est\u00e1 dividido en varias tareas), desde la descarga del conjunto de datos hasta la conversi\u00f3n y divisi\u00f3n en conjuntos de entrenamiento, validaci\u00f3n y prueba. Tambi\u00e9n se puede observar la operaci\u00f3n exitosa en el dashboard:","title":"Prefect"},{"location":"prefect/#prefect","text":"Este proyecto utiliza Prefect para la orquestaci\u00f3n de flujos de trabajo y tareas automatizadas. Prefect es una herramienta que permite definir, programar y monitorear flujos de trabajo de manera eficiente. M\u00e1s informaci\u00f3n sobre Prefect se puede encontrar en su documentaci\u00f3n oficial .","title":"Prefect"},{"location":"prefect/#flujos-definidos","text":"Actualmente, se ha definido un flujo principal que se encarga de descargar y preprocesar el conjunto de datos EuroSAT. Este flujo se encuentra en el archivo dataset_flow.py y se ejecuta utilizando Prefect. Existe un cliente cli.py que permite ejecutar el flujo desde la l\u00ednea de comandos. Para ejecutar el flujo, puedes utilizar el siguiente comando: python -m vision_transformer.flows.cli prepare-dataset-flow huggingface Este flujo realiza las siguientes tareas: Descarga del conjunto de datos : Descarga el conjunto de datos de EuroSAT en su versi\u00f3n RGB. Extracci\u00f3n de datos : Extrae las im\u00e1genes del archivo descargado (como ZIP). Conversi\u00f3n a formato HuggingFace : Convierte las im\u00e1genes a un formato compatible con Hugging Face, creando un dataset que puede ser utilizado por los modelos de Vision Transformer. Split del dataset : Divide el conjunto de datos en conjuntos de entrenamiento, validaci\u00f3n y prueba, asegurando que las proporciones sean adecuadas para el entrenamiento de modelos.","title":"Flujos definidos"},{"location":"prefect/#ejemplo-de-ejecucion","text":"Puedes ver un ejemplo de ejecuci\u00f3n del flujo en la siguiente imagen: En este ejemplo podemos observar la ejecuci\u00f3n de cada uno de los pasos del flujo (el flujo est\u00e1 dividido en varias tareas), desde la descarga del conjunto de datos hasta la conversi\u00f3n y divisi\u00f3n en conjuntos de entrenamiento, validaci\u00f3n y prueba. Tambi\u00e9n se puede observar la operaci\u00f3n exitosa en el dashboard:","title":"Ejemplo de ejecuci\u00f3n"},{"location":"tests/","text":"Tests Este proyecto incluye una serie de pruebas para asegurar la calidad del c\u00f3digo y el correcto funcionamiento de los modelos implementados. Las pruebas consisten en test unitarios que verifican el comportamiento esperado de las funciones y clases. Se utiliza la librer\u00eda pytest para la ejecuci\u00f3n de las pruebas. Esta herramienta permite definir y ejecutar pruebas de manera sencilla, proporcionando un informe detallado de los resultados. M\u00e1s informaci\u00f3n sobre pytest se puede encontrar en su documentaci\u00f3n oficial . Para ejecutar las pruebas, partiendo de que tienes el ambiente configurado, puedes utilizar el siguiente comando: pytest Las pruebas est\u00e1n organizadas en el directorio tests . Actualmente existen pruebas para los siguientes m\u00f3dulos: test_config.py : Verifica la correcta carga y validaci\u00f3n de la configuraci\u00f3n del proyecto. test_dataset.py : Comprueba la correcta carga y preprocesamiento del conjunto de datos EuroSAT. test_dataset_flow : Verifica el flujo de trabajo de carga y preprocesamiento del conjunto de datos utilizando Prefect. La estructura de las pruebas es la siguiente: Ejemplo de ejecuci\u00f3n Se puede observar un ejemplo de ejecuci\u00f3n de las pruebas en la siguiente imagen:","title":"Tests"},{"location":"tests/#tests","text":"Este proyecto incluye una serie de pruebas para asegurar la calidad del c\u00f3digo y el correcto funcionamiento de los modelos implementados. Las pruebas consisten en test unitarios que verifican el comportamiento esperado de las funciones y clases. Se utiliza la librer\u00eda pytest para la ejecuci\u00f3n de las pruebas. Esta herramienta permite definir y ejecutar pruebas de manera sencilla, proporcionando un informe detallado de los resultados. M\u00e1s informaci\u00f3n sobre pytest se puede encontrar en su documentaci\u00f3n oficial . Para ejecutar las pruebas, partiendo de que tienes el ambiente configurado, puedes utilizar el siguiente comando: pytest Las pruebas est\u00e1n organizadas en el directorio tests . Actualmente existen pruebas para los siguientes m\u00f3dulos: test_config.py : Verifica la correcta carga y validaci\u00f3n de la configuraci\u00f3n del proyecto. test_dataset.py : Comprueba la correcta carga y preprocesamiento del conjunto de datos EuroSAT. test_dataset_flow : Verifica el flujo de trabajo de carga y preprocesamiento del conjunto de datos utilizando Prefect. La estructura de las pruebas es la siguiente:","title":"Tests"},{"location":"tests/#ejemplo-de-ejecucion","text":"Se puede observar un ejemplo de ejecuci\u00f3n de las pruebas en la siguiente imagen:","title":"Ejemplo de ejecuci\u00f3n"}]}